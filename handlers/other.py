import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)


from aiogram import Router, F, Bot
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.utils.i18n import gettext as _

from database.orm_users import orm_update_locale, orm_update_status

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
other_router = Router()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@other_router.message(Command('help'))
async def process_help_command(message: Message):
    await message.answer(
        text=_('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
               '/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n'
               '/locale - —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n'
               '/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n'
               '/product - —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è\n'
               '/donat - –¥–æ–Ω–∞—Ç –∞–≤—Ç–æ—Ä—É\n'
               '/refund - –≤–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞\n')
    )


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_keyboard():
    button_1 = InlineKeyboardButton(text=_('üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫'), callback_data='locale_en')
    button_2 = InlineKeyboardButton(text=_('üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫'), callback_data='locale_ru')
    button_3 = InlineKeyboardButton(text=_('üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫'), callback_data='locale_de')
    button_4 = InlineKeyboardButton(text=_('üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π —è–∑—ã–∫'), callback_data='locale_jp')

    return InlineKeyboardMarkup(inline_keyboard=[[button_1], [button_2], [button_3], [button_4]])


# –≠—Ç–æ —Ö–µ–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É locale
@other_router.message(Command('locale'))
async def locale_cmd(message: Message):
    await message.answer(text=_('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫'),
                         reply_markup=get_keyboard())


@other_router.callback_query(F.data.startswith("locale_"))
async def update_locale_cmd(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    user_id = callback.from_user.id
    current_language = ''

    if callback.data == 'locale_en':
        current_language = _('üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫')
        await orm_update_locale(session, user_id, 'en')
        await callback.answer(_("–í—ã–±—Ä–∞–Ω üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"))
        await state.update_data(locale='en')
    elif callback.data == 'locale_ru':
        current_language = _('üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫')
        await orm_update_locale(session, user_id, 'ru')
        await callback.answer(_("–í—ã–±—Ä–∞–Ω üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫"))
        await state.update_data(locale='ru')
    elif callback.data == 'locale_de':
        current_language = _('üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫')
        await orm_update_locale(session, user_id, 'de')
        await callback.answer(_("–í—ã–±—Ä–∞–Ω üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫"))
        await state.update_data(locale='de')
    elif callback.data == 'locale_jp':
        current_language = _('üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π —è–∑—ã–∫')
        await orm_update_locale(session, user_id, 'ja')
        await callback.answer(_("–í—ã–±—Ä–∞–Ω üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π —è–∑—ã–∫"))
        await state.update_data(locale='ja')

    # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_reply_markup(reply_markup=None)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ
    await callback.message.answer(text=_("–í—ã–±—Ä–∞–Ω: \n{current_language}").format(current_language=current_language))


@other_router.message(Command("get_id"))
async def get_chat_id_cmd(message: Message):
    await message.answer(f"ID: <code>{message.chat.id}</code>")


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Ö –∫–æ–ø–∏—é
@other_router.message()
async def send_echo(message: Message):
    try:
        await message.send_copy(chat_id=message.chat.id)
    except TypeError:
        await message.reply(text=_('–î–∞–Ω–Ω—ã–π —Ç–∏–ø –∞–ø–¥–µ–π—Ç–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥–æ–º send_copy'))
