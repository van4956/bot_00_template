import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: %s", __name__)

from datetime import datetime, timedelta, timezone
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.i18n import gettext as _



# –û–±—ä—è–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
donat_router = Router()
# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö
donat_router.message.filter(F.chat.type == "private")


# –£—Å–ª–æ–≤–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: –≤–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π –ø–æ—Å–ª–µ –¥–æ–Ω–∞—Ç–∞
REFUND_PERIOD_DAYS = 30

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@donat_router.message(Command("donate", "donat", "–¥–æ–Ω–∞—Ç"))
async def cmd_donate(message: Message, command: CommandObject):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç —Å—É–º–º—ã –∑–≤—ë–∑–¥ –¥–ª—è –¥–æ–Ω–∞—Ç–∞
    # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ —Å—É–º–º–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã —Å—É–º–º–∞ –±—ã–ª–∞ –æ—Ç 1 –¥–æ 2500 –∑–≤—ë–∑–¥ (–ª–∏–º–∏—Ç—ã Telegram API)
    if command.args is None or not command.args.isdigit() or not 1 <= int(command.args) <= 2500:
        text = ('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>/donate [–ß–ò–°–õ–û]</code>\n'
                '–≥–¥–µ [–ß–ò–°–õ–û] —ç—Ç–æ —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞, –æ—Ç 1 –¥–æ 2500 ‚≠êÔ∏è \n\n'

                '–ü—Ä–∏–º–µ—Ä—ã:\n'
                '‚Ä¢ <code>/donate 100</code> - –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å 100 ‚≠êÔ∏è\n'
                '‚Ä¢ <code>/donate 500</code> - –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å 500 ‚≠êÔ∏è\n'
                '‚Ä¢ <code>/donate 1000</code> - –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å 1000 ‚≠êÔ∏è')
        await message.answer(text=_(text))
        return

    # –°—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞
    amount = int(command.args)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
    kb = InlineKeyboardBuilder()
    kb.button(
        text=_("–û–ø–ª–∞—Ç–∏—Ç—å {amount} XTR").format(amount=amount),
        pay=True  # –í–∞–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    )
    kb.button(text=_("–û—Ç–º–µ–Ω–∏—Ç—å"), callback_data="donate_cancel")
    kb.adjust(1)  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
    prices = [LabeledPrice(label="XTR", amount=amount)]

    await message.answer_invoice(
        title=_("–î–æ–Ω–∞—Ç –∞–≤—Ç–æ—Ä—É"),
        description=_("–ù–∞ —Å—É–º–º—É –≤ {amount} –∑–≤—ë–∑–¥").format(amount=amount),
        prices=prices,
        provider_token="",
        payload=f"{amount}_stars_{datetime.now(timezone.utc).isoformat()}",  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∫ payload
        currency="XTR",
        reply_markup=kb.as_markup()
    )


@donat_router.callback_query(F.data == "donate_cancel")
async def on_donate_cancel(callback: CallbackQuery):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–æ–Ω–∞—Ç–∞, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.answer(_("üò¢ –î–æ–Ω–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω."))
    await callback.message.delete()


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø–æ–∫—É–ø–æ–∫
@donat_router.message(Command("paysupport"))
async def cmd_paysupport(message: Message, state: FSMContext):
    data = await state.get_data()
    t_id = data.get('t_id')
    await message.answer(
        text=_('–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /refund \n\nü§ì –í–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n<code>{t_id}</code>').format(t_id=t_id))


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ (Terms of Service)
@donat_router.message(Command("terms"))
async def cmd_terms(message: Message):
    terms_text = (
        "<b>Terms of Service</b>\n\n"
        "1. –î–æ–Ω–∞—Ç—ã —è–≤–ª—è—é—Ç—Å—è –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–º–∏ –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π –ø–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.\n\n"
        "2. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ª—É—á–∏—Ç—å ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ /paysupport\n\n"
        "3. –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è 30 –¥–Ω–µ–π –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.\n\n"
        "4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.\n\n"
    )
    await message.answer(_(terms_text))


@donat_router.message(Command("refund"))
async def cmd_refund(message: Message, bot: Bot, command: CommandObject):
    # ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –∏–ª–∏ —É—Å–ª—É–≥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å
    t_id = command.args

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if t_id is None:
        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>/refund [id]</code>, –≥–¥–µ [id] —ç—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ—Å–ª–µ –¥–æ–Ω–∞—Ç–∞."
        await message.answer(_(text))
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞, –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏–∑ payload
    try:
        timestamp_str = t_id.split("_")[-1]
        transaction_time = datetime.fromisoformat(timestamp_str)
        if datetime.utcnow() > transaction_time + timedelta(days=REFUND_PERIOD_DAYS):
            await message.answer(_("–°—Ä–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏—Å—Ç–µ–∫. –í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π –ø–æ—Å–ª–µ –¥–æ–Ω–∞—Ç–∞."))
            return

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    except (ValueError, IndexError):
        await message.answer(_("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."))
        return

    # –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
    try:
        await bot.refund_star_payment(
            user_id=message.from_user.id,
            telegram_payment_charge_id=t_id
        )
        await message.answer(_("–†–µ—Ñ–∞–Ω–¥ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –∑–≤—ë–∑–¥—ã —É–∂–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∞—à —Å—á—ë—Ç –≤ Telegram."))

    except TelegramBadRequest as e:
        err_text = _("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")

        if "CHARGE_ALREADY_REFUNDED" in e.message:
            err_text = _("–†–µ—Ñ–∞–Ω–¥ –ø–æ —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É–∂–µ –±—ã–ª —Ä–∞–Ω–µ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω.")

        await message.answer(err_text)
        return


@donat_router.pre_checkout_query()
async def pre_checkout_query(query: PreCheckoutQuery):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π, –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
    # –ú—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–Ω–∞—Ç
    await query.answer(ok=True)

    # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
    # await query.answer(ok=False, error_message="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")


@donat_router.message(F.successful_payment)
async def on_successfull_payment(message: Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç message.successful_payment —Å ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏–º –≤–∞–∂–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
    t_id = message.successful_payment.telegram_payment_charge_id
    await state.update_data(t_id=t_id)
    await message.answer(
        text=_("<b>ü´° –°–ø–∞—Å–∏–±–æ!</b>\n"
               "–í–∞—à –¥–æ–Ω–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç.\n"
                "ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ,code>{t_id}</code>").format(t_id=t_id),
        message_effect_id="5159385139981059251"
    )
        # –¥—Ä—É–≥–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–∞–¥–æ)
        # üî• –æ–≥–æ–Ω—å - 5104841245755180586
        # üëç –ª–∞–π–∫ - 5107584321108051014
        # üëé –¥–∏–∑–ª–∞–π–∫ - 5104858069142078462
        # ‚ù§Ô∏è —Å–µ—Ä–¥–µ—á–∫–æ - 5159385139981059251
        # üéâ –ø—Ä–∞–∑–¥–Ω–∏–∫ - 5046509860389126442
        # üí© –∫–∞–∫–∞—Ö–∞ - 5046589136895476101
